/* 
 * Copyright 2015 cornerpirate.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package Views;

import Models.Host;
import Models.Vulnerability;
import java.awt.Color;
import java.awt.Component;
import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;

/**
 *
 * @author cornerpirate
 */
public class VulnerabilityViewTreeCellRenderer extends DefaultTreeCellRenderer {

    protected Icon no_risk_icon;
    protected Icon info_risk_icon;
    protected Icon low_risk_icon;
    protected Icon medium_risk_icon;
    protected Icon high_risk_icon;
    protected Icon critical_risk_icon;
    protected Icon computer_icon;

    protected boolean show_highlights;

    public VulnerabilityViewTreeCellRenderer(boolean showHighlights) {
        super();

        this.critical_risk_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/critical-icon.png"));
        this.high_risk_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/high-icon.png"));
        this.medium_risk_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/medium-icon.png"));
        this.low_risk_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/low-icon.png"));
        this.info_risk_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/info-icon.png"));
        this.no_risk_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/none-icon.png"));
        this.computer_icon = new ImageIcon(VulnerabilityViewTreeCellRenderer.class.getResource("/Images/computer-icon.png"));
        this.show_highlights = showHighlights;
    }

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {

        Component c = super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);

        //if (leaf) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
        Object obj = node.getUserObject();
        if (obj instanceof Vulnerability) {

            Vulnerability vuln = (Vulnerability) obj;
            setToolTipText("<html>" + vuln.getIDsAsString().replaceAll("\n", "<br>")  + "</html>");
            //System.out.println(vuln.getIDsAsString()) ;
            String category = vuln.getRisk_category();

            if (category.equalsIgnoreCase("critical")) {
                setIcon(this.critical_risk_icon);
            } else if (category.equalsIgnoreCase("high")) {
                setIcon(this.high_risk_icon);
            } else if (category.equalsIgnoreCase("medium")) {
                setIcon(this.medium_risk_icon);
            } else if (category.equalsIgnoreCase("low")) {
                setIcon(this.low_risk_icon);
            } else if (category.equalsIgnoreCase("info")) {
                setIcon(this.info_risk_icon);
            } else if (category.equalsIgnoreCase("none")) {
                setIcon(this.no_risk_icon);
            }

            if (vuln.isHighlighted() && this.show_highlights == true) {
                this.setBorder(BorderFactory.createMatteBorder(-1, 12, -1, -1, Color.RED));
            } else {
                this.setBorder(null);
            }

        } else if (obj instanceof Host) {
            Host host = (Host) obj;
            this.setText(host.getIp_address() + " - " + host.getHostname() + " - " + host.getPortnumber() + "/" + host.getProtocol());
            setIcon(this.computer_icon);
        }

        //}
        return c;
    }

}
