/* 
 * Copyright 2015 cornerpirate.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cornerpirate.reportcompiler.GUI;

import com.cornerpirate.reportcompiler.Models.CVSSVector;
import com.cornerpirate.reportcompiler.Models.Vulnerability;
import com.cornerpirate.reportcompiler.Utils.Helper;
import com.cornerpirate.reportcompiler.Utils.TreeUtils;
import java.awt.Font;
import java.util.Enumeration;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author cornerpirate
 */
public class CVSSv2Calculator extends javax.swing.JFrame {

    protected Vulnerability vuln;
    protected Vulnerability tmp_vuln = new Vulnerability();
    protected JTree vuln_tree;
    protected DefaultMutableTreeNode vuln_node;
    final Helper helper = new Helper();
    
    // Added to change from default Java logo.
    ImageIcon logo = new ImageIcon(getClass().getClassLoader().getResource("icon.png"));

    /**
     * Creates new form CVSSv2Calculator
     */
    public CVSSv2Calculator(java.awt.Frame parent, boolean modal, JTree tree, DefaultMutableTreeNode vuln_node) {
        //super(parent, modal);
        initComponents();
        
        // set the icon 
        this.setIconImage(logo.getImage());
        
        this.vuln_tree = tree;
        this.vuln_node = vuln_node;
        // Remove Action Listener
        this.RiskCategoryList.removeActionListener(RiskCategoryList.getActionListeners()[0]);
        this.vuln = (Vulnerability) vuln_node.getUserObject();
        this.tmp_vuln.cloneRisk(vuln); // default to the same risk settings as the original. Only alter the original if 'save' is pressed

        //setup GUI with the initial score etc
        this.setLocationRelativeTo(null); // this centres the dialog on the screen
        //Set screen title to be the vuln name
        this.setTitle("Edit Risk for: " + this.vuln.getTitle());
        //Set Start CVSS Vector String
        this.CVSSVectorString.setText(this.vuln.getCvss_vector_string());
        // setup the radio buttons
        if (vuln.isIs_custom_risk() == false) {
            // This vuln has a CVSS vector
            setradioButtons();
        }
        //Set Start Risk Score
        this.RiskScore.setText("" + this.vuln.getRiskScore());
        //Set Start Risk Category
        this.RiskCategoryList.setSelectedItem(this.vuln.getRisk_category());

        // Setup the JList selection listeners
        RiskCategoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RiskCategoryListActionPerformed(evt);
            }
        });

        // get users preferred font size if they have it. Sets to 12 if they dont.
        Font currentfont = this.CVSSVectorString.getFont();
        helper.setFontSize(currentfont, this.getRootPane());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        access_vector_group = new javax.swing.ButtonGroup();
        access_complexity_group = new javax.swing.ButtonGroup();
        authentication_group = new javax.swing.ButtonGroup();
        confidentiality_impact_group = new javax.swing.ButtonGroup();
        integrity_metrics_group = new javax.swing.ButtonGroup();
        availability_impact_group = new javax.swing.ButtonGroup();
        cdp_group = new javax.swing.ButtonGroup();
        td_group = new javax.swing.ButtonGroup();
        cr_group = new javax.swing.ButtonGroup();
        ir_group = new javax.swing.ButtonGroup();
        ar_group = new javax.swing.ButtonGroup();
        e_group = new javax.swing.ButtonGroup();
        rl_group = new javax.swing.ButtonGroup();
        rc_group = new javax.swing.ButtonGroup();
        jScrollBar1 = new javax.swing.JScrollBar();
        jPanel1 = new javax.swing.JPanel();
        SaveBiutton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        CVSSVectorString = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        RiskScore = new javax.swing.JTextField();
        RiskCategoryList = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        topPanel = new javax.swing.JPanel();
        left_panel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        av_local = new javax.swing.JRadioButton();
        av_adjacent_network = new javax.swing.JRadioButton();
        av_network = new javax.swing.JRadioButton();
        ac_high = new javax.swing.JRadioButton();
        ac_medium = new javax.swing.JRadioButton();
        ac_low = new javax.swing.JRadioButton();
        au_multiple = new javax.swing.JRadioButton();
        au_single = new javax.swing.JRadioButton();
        au_none = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        right_panel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        c_none = new javax.swing.JRadioButton();
        c_partial = new javax.swing.JRadioButton();
        c_complete = new javax.swing.JRadioButton();
        i_none = new javax.swing.JRadioButton();
        i_partial = new javax.swing.JRadioButton();
        i_complete = new javax.swing.JRadioButton();
        a_none = new javax.swing.JRadioButton();
        a_partial = new javax.swing.JRadioButton();
        a_complete = new javax.swing.JRadioButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        middlepanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        e_not_defined = new javax.swing.JRadioButton();
        e_unproven = new javax.swing.JRadioButton();
        e_poc = new javax.swing.JRadioButton();
        e_functional = new javax.swing.JRadioButton();
        e_high = new javax.swing.JRadioButton();
        rl_not_defined = new javax.swing.JRadioButton();
        rl_official = new javax.swing.JRadioButton();
        rl_temporary = new javax.swing.JRadioButton();
        rl_workaround = new javax.swing.JRadioButton();
        rl_unavailable = new javax.swing.JRadioButton();
        rc_not_defined = new javax.swing.JRadioButton();
        rc_unconfirmed = new javax.swing.JRadioButton();
        rc_uncorroborated = new javax.swing.JRadioButton();
        rc_confirmed = new javax.swing.JRadioButton();
        bottomPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cdp_not_defined = new javax.swing.JRadioButton();
        cdp_none = new javax.swing.JRadioButton();
        cdp_low = new javax.swing.JRadioButton();
        cdp_low_medium = new javax.swing.JRadioButton();
        cdp_medium_high = new javax.swing.JRadioButton();
        cdp_high = new javax.swing.JRadioButton();
        target_dist_not_defined = new javax.swing.JRadioButton();
        target_dist_none = new javax.swing.JRadioButton();
        target_dist_low = new javax.swing.JRadioButton();
        target_dist_medium = new javax.swing.JRadioButton();
        target_dist_high = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        confidentiality_requirement_not_defined = new javax.swing.JRadioButton();
        confidentiality_requirement_low = new javax.swing.JRadioButton();
        confidentiality_requirement_medium = new javax.swing.JRadioButton();
        confidentiality_requirement_high = new javax.swing.JRadioButton();
        integrity_requirement_not_defined = new javax.swing.JRadioButton();
        integrity_requirement_low = new javax.swing.JRadioButton();
        integrity_requirement_medium = new javax.swing.JRadioButton();
        integrity_requirement_high = new javax.swing.JRadioButton();
        availability_requirement_not_defined = new javax.swing.JRadioButton();
        availability_requirement_low = new javax.swing.JRadioButton();
        availability_requirement_medium = new javax.swing.JRadioButton();
        availability_requirement_high = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        SaveBiutton.setText("Save");
        SaveBiutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBiuttonActionPerformed(evt);
            }
        });

        jLabel4.setText("CVSS Vector String: ");

        CVSSVectorString.setEditable(false);

        jLabel5.setText("Risk Score:");

        jLabel6.setText("Risk Category:");

        RiskScore.setEditable(false);

        RiskCategoryList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Critical", "High", "Medium", "Low", "Info", "None", "Fixed" }));
        RiskCategoryList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RiskCategoryListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RiskScore, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RiskCategoryList, 0, 561, Short.MAX_VALUE))
                    .addComponent(CVSSVectorString))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveBiutton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(CVSSVectorString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(SaveBiutton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(RiskCategoryList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(RiskScore, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(20);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setName(""); // NOI18N
        jSplitPane1.setOneTouchExpandable(true);

        topPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        topPanel.setLayout(new java.awt.BorderLayout(20, 0));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Exploitability Metrics");

        jLabel8.setText("Access Vector (AV)");

        jLabel9.setText("Access Complexity (AC)");

        jLabel10.setText("Authentication (Au)");

        access_vector_group.add(av_local);
        av_local.setText("Local (AV:L)");
        av_local.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                av_localActionPerformed(evt);
            }
        });

        access_vector_group.add(av_adjacent_network);
        av_adjacent_network.setText("Adjacent Network (AV:A)");
        av_adjacent_network.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                av_adjacent_networkActionPerformed(evt);
            }
        });

        access_vector_group.add(av_network);
        av_network.setText("Network (AV:N)");
        av_network.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                av_networkActionPerformed(evt);
            }
        });

        access_complexity_group.add(ac_high);
        ac_high.setText("High (AC:H)");
        ac_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ac_highActionPerformed(evt);
            }
        });

        access_complexity_group.add(ac_medium);
        ac_medium.setText("Medium (AC:M)");
        ac_medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ac_mediumActionPerformed(evt);
            }
        });

        access_complexity_group.add(ac_low);
        ac_low.setText("Low (AC:L)");
        ac_low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ac_lowActionPerformed(evt);
            }
        });

        authentication_group.add(au_multiple);
        au_multiple.setText("Multiple (Au:M)");
        au_multiple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                au_multipleActionPerformed(evt);
            }
        });

        authentication_group.add(au_single);
        au_single.setText("Single (Au:S)");
        au_single.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                au_singleActionPerformed(evt);
            }
        });

        authentication_group.add(au_none);
        au_none.setText("None (Au:N)");
        au_none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                au_noneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout left_panelLayout = new javax.swing.GroupLayout(left_panel);
        left_panel.setLayout(left_panelLayout);
        left_panelLayout.setHorizontalGroup(
            left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(left_panelLayout.createSequentialGroup()
                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(left_panelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)))
                    .addGroup(left_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(left_panelLayout.createSequentialGroup()
                                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(av_local)
                                    .addComponent(ac_high)
                                    .addComponent(au_multiple))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(left_panelLayout.createSequentialGroup()
                                        .addComponent(au_single)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(au_none))
                                    .addGroup(left_panelLayout.createSequentialGroup()
                                        .addComponent(av_adjacent_network)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(av_network))
                                    .addGroup(left_panelLayout.createSequentialGroup()
                                        .addComponent(ac_medium)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ac_low))))
                            .addGroup(left_panelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        left_panelLayout.setVerticalGroup(
            left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(left_panelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(av_local)
                    .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(av_adjacent_network)
                        .addComponent(av_network)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ac_high)
                    .addComponent(ac_medium)
                    .addComponent(ac_low))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(left_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(au_multiple)
                    .addComponent(au_single)
                    .addComponent(au_none))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        topPanel.add(left_panel, java.awt.BorderLayout.WEST);

        jLabel1.setBackground(new java.awt.Color(51, 51, 255));
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Base Score Metrics");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        topPanel.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Impact Metrics");

        jLabel12.setText("Confidentiality Impact (C)");

        jLabel13.setText("Integrity Impact (I)");

        jLabel14.setText("Availability Impact (A)");

        confidentiality_impact_group.add(c_none);
        c_none.setText("None (C:N)");
        c_none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_noneActionPerformed(evt);
            }
        });

        confidentiality_impact_group.add(c_partial);
        c_partial.setText("Partial (C:P)");
        c_partial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_partialActionPerformed(evt);
            }
        });

        confidentiality_impact_group.add(c_complete);
        c_complete.setText("Complete (C:C)");
        c_complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                c_completeActionPerformed(evt);
            }
        });

        integrity_metrics_group.add(i_none);
        i_none.setText("None (I:N)");
        i_none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                i_noneActionPerformed(evt);
            }
        });

        integrity_metrics_group.add(i_partial);
        i_partial.setText("Partial (I:P)");
        i_partial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                i_partialActionPerformed(evt);
            }
        });

        integrity_metrics_group.add(i_complete);
        i_complete.setText("Complete (I:C)");
        i_complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                i_completeActionPerformed(evt);
            }
        });

        availability_impact_group.add(a_none);
        a_none.setText("None (A:N)");
        a_none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_noneActionPerformed(evt);
            }
        });

        availability_impact_group.add(a_partial);
        a_partial.setText("Partial (A:P)");
        a_partial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_partialActionPerformed(evt);
            }
        });

        availability_impact_group.add(a_complete);
        a_complete.setText("Complete (A:C)");
        a_complete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a_completeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout right_panelLayout = new javax.swing.GroupLayout(right_panel);
        right_panel.setLayout(right_panelLayout);
        right_panelLayout.setHorizontalGroup(
            right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(right_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(right_panelLayout.createSequentialGroup()
                        .addComponent(a_none)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(a_partial)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(a_complete))
                    .addGroup(right_panelLayout.createSequentialGroup()
                        .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(c_none)
                            .addComponent(i_none))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(i_partial)
                            .addComponent(c_partial))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(c_complete)
                            .addComponent(i_complete)))
                    .addComponent(jLabel11)
                    .addGroup(right_panelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12))))
                .addContainerGap(334, Short.MAX_VALUE))
        );
        right_panelLayout.setVerticalGroup(
            right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(right_panelLayout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(c_none)
                    .addComponent(c_partial)
                    .addComponent(c_complete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(i_none)
                    .addComponent(i_partial)
                    .addComponent(i_complete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(right_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(a_none)
                    .addComponent(a_partial)
                    .addComponent(a_complete))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        topPanel.add(right_panel, java.awt.BorderLayout.CENTER);

        jSplitPane1.setTopComponent(topPanel);

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setDividerSize(20);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);

        middlepanel.setMinimumSize(new java.awt.Dimension(0, 0));
        middlepanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Temporal Score Metrics");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        middlepanel.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jLabel23.setText("Exploitability (E)");

        jLabel24.setText("Remediation Level (RL)");

        jLabel25.setText("Report Confidence (RC)");

        e_group.add(e_not_defined);
        e_not_defined.setSelected(true);
        e_not_defined.setText("Not Defined (E:ND)");
        e_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_not_definedActionPerformed(evt);
            }
        });

        e_group.add(e_unproven);
        e_unproven.setText("Unproven that exploit exists (E:U)");
        e_unproven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_unprovenActionPerformed(evt);
            }
        });

        e_group.add(e_poc);
        e_poc.setText("Proof of Concept Code (E:POC)");
        e_poc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_pocActionPerformed(evt);
            }
        });

        e_group.add(e_functional);
        e_functional.setText("Functional exploit exists (E:F)");
        e_functional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_functionalActionPerformed(evt);
            }
        });

        e_group.add(e_high);
        e_high.setText("High (E:H)");
        e_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_highActionPerformed(evt);
            }
        });

        rl_group.add(rl_not_defined);
        rl_not_defined.setSelected(true);
        rl_not_defined.setText("Not Defined (RL:ND)");
        rl_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rl_not_definedActionPerformed(evt);
            }
        });

        rl_group.add(rl_official);
        rl_official.setText("Official Fix (RL:OF)");
        rl_official.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rl_officialActionPerformed(evt);
            }
        });

        rl_group.add(rl_temporary);
        rl_temporary.setText("Temporary Fix (RL:T)");
        rl_temporary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rl_temporaryActionPerformed(evt);
            }
        });

        rl_group.add(rl_workaround);
        rl_workaround.setText("Workaround (RL:W)");
        rl_workaround.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rl_workaroundActionPerformed(evt);
            }
        });

        rl_group.add(rl_unavailable);
        rl_unavailable.setText("Unavailable (RL:U)");
        rl_unavailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rl_unavailableActionPerformed(evt);
            }
        });

        rc_group.add(rc_not_defined);
        rc_not_defined.setSelected(true);
        rc_not_defined.setText("Not Defined (RC:ND)");
        rc_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rc_not_definedActionPerformed(evt);
            }
        });

        rc_group.add(rc_unconfirmed);
        rc_unconfirmed.setText("Unconfirmed (RC:UC)");
        rc_unconfirmed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rc_unconfirmedActionPerformed(evt);
            }
        });

        rc_group.add(rc_uncorroborated);
        rc_uncorroborated.setText("Uncorroborated (RC:UR)");
        rc_uncorroborated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rc_uncorroboratedActionPerformed(evt);
            }
        });

        rc_group.add(rc_confirmed);
        rc_confirmed.setText("Confirmed (RC:C)");
        rc_confirmed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rc_confirmedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rc_not_defined)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rc_unconfirmed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rc_uncorroborated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rc_confirmed))
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(e_not_defined)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(e_unproven)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(e_poc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(e_functional)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(e_high))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(rl_not_defined)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rl_official)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rl_temporary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rl_workaround)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rl_unavailable)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel23)
                .addGap(4, 4, 4)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(e_not_defined)
                    .addComponent(e_unproven)
                    .addComponent(e_poc)
                    .addComponent(e_functional)
                    .addComponent(e_high))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel24)
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rl_not_defined)
                    .addComponent(rl_official)
                    .addComponent(rl_temporary)
                    .addComponent(rl_workaround)
                    .addComponent(rl_unavailable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rc_not_defined)
                    .addComponent(rc_unconfirmed)
                    .addComponent(rc_uncorroborated)
                    .addComponent(rc_confirmed))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        middlepanel.add(jPanel5, java.awt.BorderLayout.WEST);

        jSplitPane2.setTopComponent(middlepanel);

        bottomPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        bottomPanel.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Environmental Score Metric");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        bottomPanel.add(jLabel3, java.awt.BorderLayout.NORTH);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel15.setText("General Modifiers");

        jLabel16.setText("Collateral Damage Potential (CDP)");

        jLabel17.setText("Target Distribution (TD)");

        cdp_group.add(cdp_not_defined);
        cdp_not_defined.setSelected(true);
        cdp_not_defined.setText("Not Defined (CDP:ND)");
        cdp_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdp_not_definedActionPerformed(evt);
            }
        });

        cdp_group.add(cdp_none);
        cdp_none.setText("None (CDP:N)");
        cdp_none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdp_noneActionPerformed(evt);
            }
        });

        cdp_group.add(cdp_low);
        cdp_low.setText("Low (ligh loss) (CDP:L)");
        cdp_low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdp_lowActionPerformed(evt);
            }
        });

        cdp_group.add(cdp_low_medium);
        cdp_low_medium.setText("Low-Medium (CDP:LM)");
        cdp_low_medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdp_low_mediumActionPerformed(evt);
            }
        });

        cdp_group.add(cdp_medium_high);
        cdp_medium_high.setText("Medium-High (CDP:MH)");
        cdp_medium_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdp_medium_highActionPerformed(evt);
            }
        });

        cdp_group.add(cdp_high);
        cdp_high.setText("High (catastrophic loss) (CDP:H)");
        cdp_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdp_highActionPerformed(evt);
            }
        });

        td_group.add(target_dist_not_defined);
        target_dist_not_defined.setSelected(true);
        target_dist_not_defined.setText("Not Defined (TD:ND)");
        target_dist_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                target_dist_not_definedActionPerformed(evt);
            }
        });

        td_group.add(target_dist_none);
        target_dist_none.setText("None [0%] (TD:N)");
        target_dist_none.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                target_dist_noneActionPerformed(evt);
            }
        });

        td_group.add(target_dist_low);
        target_dist_low.setText("Low [0-25%] (TD:L)");
        target_dist_low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                target_dist_lowActionPerformed(evt);
            }
        });

        td_group.add(target_dist_medium);
        target_dist_medium.setText("Medium [26-75%] (TD:M)");
        target_dist_medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                target_dist_mediumActionPerformed(evt);
            }
        });

        td_group.add(target_dist_high);
        target_dist_high.setText("High [76-100%] (TD:H)");
        target_dist_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                target_dist_highActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel18.setText("Impact Subscore Modifiers");

        jLabel19.setText("Confidentiality Requirement ( CR)");

        jLabel20.setText("Integrity Requirement (IR)");

        jLabel21.setText("Availability Requirement (AR)");

        cr_group.add(confidentiality_requirement_not_defined);
        confidentiality_requirement_not_defined.setSelected(true);
        confidentiality_requirement_not_defined.setText("Not Defined (CR:ND)");
        confidentiality_requirement_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confidentiality_requirement_not_definedActionPerformed(evt);
            }
        });

        cr_group.add(confidentiality_requirement_low);
        confidentiality_requirement_low.setText("Low (CR:L)");
        confidentiality_requirement_low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confidentiality_requirement_lowActionPerformed(evt);
            }
        });

        cr_group.add(confidentiality_requirement_medium);
        confidentiality_requirement_medium.setText("Medium (CR:M)");
        confidentiality_requirement_medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confidentiality_requirement_mediumActionPerformed(evt);
            }
        });

        cr_group.add(confidentiality_requirement_high);
        confidentiality_requirement_high.setText("High (CR:H)");
        confidentiality_requirement_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confidentiality_requirement_highActionPerformed(evt);
            }
        });

        ir_group.add(integrity_requirement_not_defined);
        integrity_requirement_not_defined.setSelected(true);
        integrity_requirement_not_defined.setText("Not Defined (IR:ND)");
        integrity_requirement_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrity_requirement_not_definedActionPerformed(evt);
            }
        });

        ir_group.add(integrity_requirement_low);
        integrity_requirement_low.setText("Low (IR:L)");
        integrity_requirement_low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrity_requirement_lowActionPerformed(evt);
            }
        });

        ir_group.add(integrity_requirement_medium);
        integrity_requirement_medium.setText("Medium (IR:M)");
        integrity_requirement_medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrity_requirement_mediumActionPerformed(evt);
            }
        });

        ir_group.add(integrity_requirement_high);
        integrity_requirement_high.setText("High (IR:H)");
        integrity_requirement_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                integrity_requirement_highActionPerformed(evt);
            }
        });

        ar_group.add(availability_requirement_not_defined);
        availability_requirement_not_defined.setSelected(true);
        availability_requirement_not_defined.setText("Not Defined (AR:ND)");
        availability_requirement_not_defined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availability_requirement_not_definedActionPerformed(evt);
            }
        });

        ar_group.add(availability_requirement_low);
        availability_requirement_low.setText("Low (AR:L)");
        availability_requirement_low.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availability_requirement_lowActionPerformed(evt);
            }
        });

        ar_group.add(availability_requirement_medium);
        availability_requirement_medium.setText("Medium (AR:M)");
        availability_requirement_medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availability_requirement_mediumActionPerformed(evt);
            }
        });

        ar_group.add(availability_requirement_high);
        availability_requirement_high.setText("High (AR:H)");
        availability_requirement_high.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availability_requirement_highActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cdp_not_defined)
                            .addComponent(target_dist_not_defined))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(target_dist_none)
                            .addComponent(cdp_none))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(target_dist_low)
                            .addComponent(cdp_low))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cdp_low_medium)
                            .addComponent(target_dist_medium))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cdp_medium_high)
                            .addComponent(target_dist_high))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cdp_high))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel15))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel16))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel17))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel19))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel20))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel21))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confidentiality_requirement_not_defined)
                            .addComponent(integrity_requirement_not_defined)
                            .addComponent(availability_requirement_not_defined))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confidentiality_requirement_low)
                            .addComponent(integrity_requirement_low)
                            .addComponent(availability_requirement_low))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confidentiality_requirement_medium)
                            .addComponent(integrity_requirement_medium)
                            .addComponent(availability_requirement_medium))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(confidentiality_requirement_high)
                            .addComponent(integrity_requirement_high)
                            .addComponent(availability_requirement_high))))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cdp_not_defined)
                    .addComponent(cdp_none)
                    .addComponent(cdp_low)
                    .addComponent(cdp_low_medium)
                    .addComponent(cdp_medium_high)
                    .addComponent(cdp_high))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(target_dist_not_defined)
                    .addComponent(target_dist_none)
                    .addComponent(target_dist_low)
                    .addComponent(target_dist_medium)
                    .addComponent(target_dist_high))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confidentiality_requirement_not_defined)
                    .addComponent(confidentiality_requirement_low)
                    .addComponent(confidentiality_requirement_medium)
                    .addComponent(confidentiality_requirement_high))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(integrity_requirement_not_defined)
                    .addComponent(integrity_requirement_low)
                    .addComponent(integrity_requirement_medium)
                    .addComponent(integrity_requirement_high))
                .addGap(1, 1, 1)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availability_requirement_not_defined)
                    .addComponent(availability_requirement_low)
                    .addComponent(availability_requirement_medium)
                    .addComponent(availability_requirement_high))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        bottomPanel.add(jPanel3, java.awt.BorderLayout.CENTER);

        jSplitPane2.setBottomComponent(bottomPanel);

        jSplitPane1.setRightComponent(jSplitPane2);

        jScrollPane1.setViewportView(jSplitPane1);
        jSplitPane1.getAccessibleContext().setAccessibleDescription("fap");

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void av_localActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_av_localActionPerformed
        getVector();
    }//GEN-LAST:event_av_localActionPerformed

    private void cdp_lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdp_lowActionPerformed
        getVector();
    }//GEN-LAST:event_cdp_lowActionPerformed

    private void av_adjacent_networkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_av_adjacent_networkActionPerformed
        getVector();
    }//GEN-LAST:event_av_adjacent_networkActionPerformed

    private void av_networkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_av_networkActionPerformed
        getVector();
    }//GEN-LAST:event_av_networkActionPerformed

    private void ac_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ac_highActionPerformed
        getVector();
    }//GEN-LAST:event_ac_highActionPerformed

    private void ac_mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ac_mediumActionPerformed
        getVector();
    }//GEN-LAST:event_ac_mediumActionPerformed

    private void ac_lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ac_lowActionPerformed
        getVector();
    }//GEN-LAST:event_ac_lowActionPerformed

    private void au_multipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_au_multipleActionPerformed
        getVector();
    }//GEN-LAST:event_au_multipleActionPerformed

    private void au_singleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_au_singleActionPerformed
        getVector();
    }//GEN-LAST:event_au_singleActionPerformed

    private void au_noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_au_noneActionPerformed
        getVector();
    }//GEN-LAST:event_au_noneActionPerformed

    private void c_noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_noneActionPerformed
        getVector();
    }//GEN-LAST:event_c_noneActionPerformed

    private void c_partialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_partialActionPerformed
        getVector();
    }//GEN-LAST:event_c_partialActionPerformed

    private void c_completeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_c_completeActionPerformed
        getVector();
    }//GEN-LAST:event_c_completeActionPerformed

    private void i_noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_i_noneActionPerformed
        getVector();
    }//GEN-LAST:event_i_noneActionPerformed

    private void i_partialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_i_partialActionPerformed
        getVector();
    }//GEN-LAST:event_i_partialActionPerformed

    private void i_completeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_i_completeActionPerformed
        getVector();
    }//GEN-LAST:event_i_completeActionPerformed

    private void a_noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a_noneActionPerformed
        getVector();
    }//GEN-LAST:event_a_noneActionPerformed

    private void a_partialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a_partialActionPerformed
        getVector();
    }//GEN-LAST:event_a_partialActionPerformed

    private void a_completeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a_completeActionPerformed
        getVector();
    }//GEN-LAST:event_a_completeActionPerformed

    private void RiskCategoryListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RiskCategoryListActionPerformed
        // The risk category has changed. Override the CVSS and take this category
        String category = (String) RiskCategoryList.getSelectedItem();
        if (this.tmp_vuln.isIs_custom_risk() == false) {
            // Trying to convert a CVSS risk to custom risk
            int answer = JOptionPane.showConfirmDialog(null, "Changing the category on a CVSS risk converts it to a 'custom risk' do you want to override the CVSS formula?");
            if (answer == JOptionPane.OK_OPTION) {
                // Clear the CVSS Vector
                CVSSVectorString.setText("");
                tmp_vuln.setIs_custom_risk(true);
                tmp_vuln.setRisk_category(category);
            }

        } else {
            // This was already a custom risk, just change the category
            tmp_vuln.setRisk_category(category);
        }

        RiskScore.setText("" + tmp_vuln.getRiskScore());
        CVSSVectorString.setText(tmp_vuln.getCvss_vector_string());

    }//GEN-LAST:event_RiskCategoryListActionPerformed

    private void SaveBiuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBiuttonActionPerformed
        System.out.println("Edit Risk 'save' pressed");
        System.out.println("Previous: " + this.vuln.getRiskScore() + " : " + this.vuln.getRisk_category() + " : " + this.vuln.getCvss_vector_string());
        System.out.println("New Risk: " + this.tmp_vuln.getRiskScore() + " : " + this.tmp_vuln.getRisk_category() + " : " + this.tmp_vuln.getCvss_vector_string());
        this.vuln.cloneRisk(this.tmp_vuln); // Change the risk      

        // Sort the main tree
        DefaultTreeModel dtm = (DefaultTreeModel) this.vuln_tree.getModel();

        TreePath pathb4 = new TreePath(dtm.getPathToRoot(this.vuln_node));

        DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();
        root = new TreeUtils().sortVulns(root);
        dtm.setRoot(root);

        Enumeration enums = root.children();
        while (enums.hasMoreElements()) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) enums.nextElement();
            Object obj = node.getUserObject();
            if (obj instanceof Vulnerability) {
                Vulnerability tmp = (Vulnerability) obj;
                if (tmp.equals(this.vuln)) {
                    // we have found the vuln. Make it selected
                    pathb4 = new TreePath(dtm.getPathToRoot(node));
                    this.vuln_tree.setSelectionPath(pathb4);
                }
            }
        }

        // Close the window
        this.dispose();
    }//GEN-LAST:event_SaveBiuttonActionPerformed

    private void e_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_e_not_definedActionPerformed

    private void e_unprovenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_unprovenActionPerformed
        getVector();
    }//GEN-LAST:event_e_unprovenActionPerformed

    private void e_pocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_pocActionPerformed
        getVector();
    }//GEN-LAST:event_e_pocActionPerformed

    private void e_functionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_functionalActionPerformed
        getVector();
    }//GEN-LAST:event_e_functionalActionPerformed

    private void e_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_highActionPerformed
        getVector();
    }//GEN-LAST:event_e_highActionPerformed

    private void rl_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rl_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_rl_not_definedActionPerformed

    private void rl_officialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rl_officialActionPerformed
        getVector();
    }//GEN-LAST:event_rl_officialActionPerformed

    private void rl_temporaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rl_temporaryActionPerformed
        getVector();
    }//GEN-LAST:event_rl_temporaryActionPerformed

    private void rl_workaroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rl_workaroundActionPerformed
        getVector();
    }//GEN-LAST:event_rl_workaroundActionPerformed

    private void rl_unavailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rl_unavailableActionPerformed
        getVector();
    }//GEN-LAST:event_rl_unavailableActionPerformed

    private void rc_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rc_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_rc_not_definedActionPerformed

    private void rc_unconfirmedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rc_unconfirmedActionPerformed
        getVector();
    }//GEN-LAST:event_rc_unconfirmedActionPerformed

    private void rc_uncorroboratedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rc_uncorroboratedActionPerformed
        getVector();
    }//GEN-LAST:event_rc_uncorroboratedActionPerformed

    private void rc_confirmedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rc_confirmedActionPerformed
        getVector();
    }//GEN-LAST:event_rc_confirmedActionPerformed

    private void cdp_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdp_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_cdp_not_definedActionPerformed

    private void cdp_noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdp_noneActionPerformed
        getVector();
    }//GEN-LAST:event_cdp_noneActionPerformed

    private void cdp_low_mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdp_low_mediumActionPerformed
        getVector();
    }//GEN-LAST:event_cdp_low_mediumActionPerformed

    private void cdp_medium_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdp_medium_highActionPerformed
        getVector();
    }//GEN-LAST:event_cdp_medium_highActionPerformed

    private void cdp_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cdp_highActionPerformed
        getVector();
    }//GEN-LAST:event_cdp_highActionPerformed

    private void target_dist_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_target_dist_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_target_dist_not_definedActionPerformed

    private void target_dist_noneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_target_dist_noneActionPerformed
        getVector();
    }//GEN-LAST:event_target_dist_noneActionPerformed

    private void target_dist_lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_target_dist_lowActionPerformed
        getVector();
    }//GEN-LAST:event_target_dist_lowActionPerformed

    private void target_dist_mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_target_dist_mediumActionPerformed
        getVector();
    }//GEN-LAST:event_target_dist_mediumActionPerformed

    private void target_dist_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_target_dist_highActionPerformed
        getVector();
    }//GEN-LAST:event_target_dist_highActionPerformed

    private void confidentiality_requirement_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confidentiality_requirement_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_confidentiality_requirement_not_definedActionPerformed

    private void confidentiality_requirement_lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confidentiality_requirement_lowActionPerformed
        getVector();
    }//GEN-LAST:event_confidentiality_requirement_lowActionPerformed

    private void confidentiality_requirement_mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confidentiality_requirement_mediumActionPerformed
        getVector();
    }//GEN-LAST:event_confidentiality_requirement_mediumActionPerformed

    private void confidentiality_requirement_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confidentiality_requirement_highActionPerformed
        getVector();
    }//GEN-LAST:event_confidentiality_requirement_highActionPerformed

    private void integrity_requirement_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrity_requirement_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_integrity_requirement_not_definedActionPerformed

    private void integrity_requirement_lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrity_requirement_lowActionPerformed
        getVector();
    }//GEN-LAST:event_integrity_requirement_lowActionPerformed

    private void integrity_requirement_mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrity_requirement_mediumActionPerformed
        getVector();
    }//GEN-LAST:event_integrity_requirement_mediumActionPerformed

    private void integrity_requirement_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_integrity_requirement_highActionPerformed
        getVector();
    }//GEN-LAST:event_integrity_requirement_highActionPerformed

    private void availability_requirement_not_definedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availability_requirement_not_definedActionPerformed
        getVector();
    }//GEN-LAST:event_availability_requirement_not_definedActionPerformed

    private void availability_requirement_lowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availability_requirement_lowActionPerformed
        getVector();
    }//GEN-LAST:event_availability_requirement_lowActionPerformed

    private void availability_requirement_mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availability_requirement_mediumActionPerformed
        getVector();
    }//GEN-LAST:event_availability_requirement_mediumActionPerformed

    private void availability_requirement_highActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availability_requirement_highActionPerformed
        getVector();
    }//GEN-LAST:event_availability_requirement_highActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CVSSv2Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CVSSv2Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CVSSv2Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CVSSv2Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog 
         java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
         CVSSv2Calculator dialog = new CVSSv2Calculator(new javax.swing.JFrame(), true);
         dialog.addWindowListener(new java.awt.event.WindowAdapter() {
         @Override
         public void windowClosing(java.awt.event.WindowEvent e) {
         System.exit(0);
         }
         });
         dialog.setVisible(true);
         }
         });
         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CVSSVectorString;
    private javax.swing.JComboBox RiskCategoryList;
    private javax.swing.JTextField RiskScore;
    private javax.swing.JButton SaveBiutton;
    private javax.swing.JRadioButton a_complete;
    private javax.swing.JRadioButton a_none;
    private javax.swing.JRadioButton a_partial;
    private javax.swing.JRadioButton ac_high;
    private javax.swing.JRadioButton ac_low;
    private javax.swing.JRadioButton ac_medium;
    private javax.swing.ButtonGroup access_complexity_group;
    private javax.swing.ButtonGroup access_vector_group;
    private javax.swing.ButtonGroup ar_group;
    private javax.swing.JRadioButton au_multiple;
    private javax.swing.JRadioButton au_none;
    private javax.swing.JRadioButton au_single;
    private javax.swing.ButtonGroup authentication_group;
    private javax.swing.JRadioButton av_adjacent_network;
    private javax.swing.JRadioButton av_local;
    private javax.swing.JRadioButton av_network;
    private javax.swing.ButtonGroup availability_impact_group;
    private javax.swing.JRadioButton availability_requirement_high;
    private javax.swing.JRadioButton availability_requirement_low;
    private javax.swing.JRadioButton availability_requirement_medium;
    private javax.swing.JRadioButton availability_requirement_not_defined;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JRadioButton c_complete;
    private javax.swing.JRadioButton c_none;
    private javax.swing.JRadioButton c_partial;
    private javax.swing.ButtonGroup cdp_group;
    private javax.swing.JRadioButton cdp_high;
    private javax.swing.JRadioButton cdp_low;
    private javax.swing.JRadioButton cdp_low_medium;
    private javax.swing.JRadioButton cdp_medium_high;
    private javax.swing.JRadioButton cdp_none;
    private javax.swing.JRadioButton cdp_not_defined;
    private javax.swing.ButtonGroup confidentiality_impact_group;
    private javax.swing.JRadioButton confidentiality_requirement_high;
    private javax.swing.JRadioButton confidentiality_requirement_low;
    private javax.swing.JRadioButton confidentiality_requirement_medium;
    private javax.swing.JRadioButton confidentiality_requirement_not_defined;
    private javax.swing.ButtonGroup cr_group;
    private javax.swing.JRadioButton e_functional;
    private javax.swing.ButtonGroup e_group;
    private javax.swing.JRadioButton e_high;
    private javax.swing.JRadioButton e_not_defined;
    private javax.swing.JRadioButton e_poc;
    private javax.swing.JRadioButton e_unproven;
    private javax.swing.JRadioButton i_complete;
    private javax.swing.JRadioButton i_none;
    private javax.swing.JRadioButton i_partial;
    private javax.swing.ButtonGroup integrity_metrics_group;
    private javax.swing.JRadioButton integrity_requirement_high;
    private javax.swing.JRadioButton integrity_requirement_low;
    private javax.swing.JRadioButton integrity_requirement_medium;
    private javax.swing.JRadioButton integrity_requirement_not_defined;
    private javax.swing.ButtonGroup ir_group;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel left_panel;
    private javax.swing.JPanel middlepanel;
    private javax.swing.JRadioButton rc_confirmed;
    private javax.swing.ButtonGroup rc_group;
    private javax.swing.JRadioButton rc_not_defined;
    private javax.swing.JRadioButton rc_unconfirmed;
    private javax.swing.JRadioButton rc_uncorroborated;
    private javax.swing.JPanel right_panel;
    private javax.swing.ButtonGroup rl_group;
    private javax.swing.JRadioButton rl_not_defined;
    private javax.swing.JRadioButton rl_official;
    private javax.swing.JRadioButton rl_temporary;
    private javax.swing.JRadioButton rl_unavailable;
    private javax.swing.JRadioButton rl_workaround;
    private javax.swing.JRadioButton target_dist_high;
    private javax.swing.JRadioButton target_dist_low;
    private javax.swing.JRadioButton target_dist_medium;
    private javax.swing.JRadioButton target_dist_none;
    private javax.swing.JRadioButton target_dist_not_defined;
    private javax.swing.ButtonGroup td_group;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    private void setradioButtons() {

        CVSSVector cvssvec = this.vuln.getCvss_vector();
        String base = cvssvec.getBaseVector();
        String temporal = cvssvec.getTemporalVector();
        String environmental = cvssvec.getEnvironmentalVector();

        //System.out.println("Base Vector: " + base);
        //System.out.println("Temporal Vector: " + temporal);
        //System.out.println("Environmental Vector: " + environmental);
        ////// Exploitability Metrics ////////////
        // Setup access vector
        if (base.contains("AV:N")) {
            // Access vector is Netowork
            av_network.setSelected(true);
        } else if (base.contains("AV:A")) {
            // Access vector is adjacent network
            av_adjacent_network.setSelected(true);
        } else if (base.contains("AV:L")) {
            // Access vector is Local
            av_local.setSelected(true);
        }

        // Setup access complexity
        if (base.contains("AC:H")) {
            // Access complexity high
            ac_high.setSelected(true);
        } else if (base.contains("AC:M")) {
            // Access complexity medium
            ac_medium.setSelected(true);
        } else if (base.contains("AC:L")) {
            // Access complexity low
            ac_low.setSelected(true);
        }

        // Setup Authentication component
        if (base.contains("Au:M")) {
            // Requires 'multiple' authentication
            au_multiple.setSelected(true);
        } else if (base.contains("Au:S")) {
            // Requires 'single' authentication
            au_single.setSelected(true);
        } else if (base.contains("Au:N")) {
            // Requires 'no' authentication a.k.a. unauthenticated.
            au_none.setSelected(true);
        }

        ////// Impact Metrics ////////////
        // Setup Confidentiality Impact
        if (base.contains("C:N")) {
            // No Impact
            c_none.setSelected(true);
        } else if (base.contains("C:P")) {
            // Partial Impact
            c_partial.setSelected(true);
        } else if (base.contains("C:C")) {
            // Complete Impact
            c_complete.setSelected(true);
        }
        // Setup Integrity Impact
        if (base.contains("I:N")) {
            // No Impact
            i_none.setSelected(true);
        } else if (base.contains("I:P")) {
            // Partial Impact
            i_partial.setSelected(true);
        } else if (base.contains("I:C")) {
            // Complete Impact
            i_complete.setSelected(true);
        }
        // Setup Availability Impact
        if (base.contains("A:N")) {
            // No Impact
            a_none.setSelected(true);
        } else if (base.contains("A:P")) {
            // Partial Impact
            a_partial.setSelected(true);
        } else if (base.contains("A:C")) {
            // Complete Impact
            a_complete.setSelected(true);
        }

        ////// Temporal Score Metrics ////////////
        if (temporal.contains("E:ND")) {
            e_not_defined.setSelected(true);
        } else if (temporal.contains("E:U")) {
            e_unproven.setSelected(true);
        } else if (temporal.contains("E:POC")) {
            e_poc.setSelected(true);
        } else if (temporal.contains("E:F")) {
            e_functional.setSelected(true);
        } else if (temporal.contains("E:H")) {
            e_high.setSelected(true);
        }

        if (temporal.contains("RL:ND")) {
            rl_not_defined.setSelected(true);
        } else if (temporal.contains("RL:OF")) {
            rl_official.setSelected(true);
        } else if (temporal.contains("RL:T")) {
            rl_temporary.setSelected(true);
        } else if (temporal.contains("RL:W")) {
            rl_workaround.setSelected(true);
        } else if (temporal.contains("RL:U")) {
            rl_unavailable.setSelected(true);
        }

        if (temporal.contains("RC:ND")) {
            rc_not_defined.setSelected(true);
        } else if (temporal.contains("RC:UC")) {
            rc_unconfirmed.setSelected(true);
        } else if (temporal.contains("RC:UR")) {
            rc_uncorroborated.setSelected(true);
        } else if (temporal.contains("RC:C")) {
            rc_confirmed.setSelected(true);
        }

        ////// Environmental Score Metrics ////////////
        ////// General Modifiers ////////////
        if (environmental.contains("CDP:ND")) {
            cdp_not_defined.setSelected(true);
        } else if (environmental.contains("CDP:N")) {
            cdp_none.setSelected(true);
        } else if (environmental.contains("CDP:L")) {
            cdp_low.setSelected(true);
        } else if (environmental.contains("CDP:LM")) {
            cdp_low_medium.setSelected(true);
        } else if (environmental.contains("CDP:MH")) {
            cdp_medium_high.setSelected(true);
        } else if (environmental.contains("CDP:H")) {
            cdp_high.setSelected(true);
        }

        if (environmental.contains("TD:ND")) {
            target_dist_not_defined.setSelected(true);
        } else if (environmental.contains("TD:N")) {
            target_dist_none.setSelected(true);
        } else if (environmental.contains("TD:L")) {
            target_dist_low.setSelected(true);
        } else if (environmental.contains("TD:M")) {
            target_dist_medium.setSelected(true);
        } else if (environmental.contains("TD:H")) {
            target_dist_high.setSelected(true);
        }

        ////// Impact Modifiers ////////////
        if (environmental.contains("CR:ND")) {
            confidentiality_requirement_not_defined.setSelected(true);
        } else if (environmental.contains("CR:L")) {
            confidentiality_requirement_low.setSelected(true);
        } else if (environmental.contains("CR:M")) {
            confidentiality_requirement_medium.setSelected(true);
        } else if (environmental.contains("CR:H")) {
            confidentiality_requirement_high.setSelected(true);
        }

        if (environmental.contains("IR:ND")) {
            integrity_requirement_not_defined.setSelected(true);
        } else if (environmental.contains("IR:L")) {
            integrity_requirement_low.setSelected(true);
        } else if (environmental.contains("IR:M")) {
            integrity_requirement_medium.setSelected(true);
        } else if (environmental.contains("IR:H")) {
            integrity_requirement_high.setSelected(true);
        }

        if (environmental.contains("AR:ND")) {
            availability_requirement_not_defined.setSelected(true);
        } else if (environmental.contains("AR:L")) {
            availability_requirement_low.setSelected(true);
        } else if (environmental.contains("AR:M")) {
            availability_requirement_medium.setSelected(true);
        } else if (environmental.contains("AR:H")) {
            availability_requirement_high.setSelected(true);
        }

    }

    private void getVector() {

        // Create the vector from the radio buttons.
        String current_vec = "";

        // Exploitation vectors
        String access_vector = "AV:";
        String access_complexity_vector = "AC:";
        String authentication_vector = "Au:";

        // Impact vectors
        String impact_confidentiality = "C:";
        String impact_integrity = "I:";
        String impact_availability = "A:";

        // Temporal scores
        String temporal_exploitability = "E:";
        String temporal_remediation_level = "RL:";
        String tmporal_report_confidence = "RC:";

        // Environmental scores
        String collatoral_damage_potential = "CDP:";
        String target_distrobution = "TD:";
        String confidentiality_requirement = "CR:";
        String integrity_requirement = "IR:";
        String availability_requirement = "AR:";

        if (av_local.isSelected()) {
            access_vector = access_vector + "L";
        } else if (av_adjacent_network.isSelected()) {
            access_vector = access_vector + "A";
        } else if (av_network.isSelected()) {
            access_vector = access_vector + "N";
        } /*else {
         av_local.setForeground(Color.red);
         av_adjacent_network.setForeground(Color.red);
         av_network.setForeground(Color.red);
         return null ;
         }*/

        if (ac_high.isSelected()) {
            access_complexity_vector = access_complexity_vector + "H";
        } else if (ac_medium.isSelected()) {
            access_complexity_vector = access_complexity_vector + "M";
        } else if (ac_low.isSelected()) {
            access_complexity_vector = access_complexity_vector + "L";
        }

        if (au_multiple.isSelected()) {
            authentication_vector = authentication_vector + "M";
        } else if (au_single.isSelected()) {
            authentication_vector = authentication_vector + "S";
        } else if (au_none.isSelected()) {
            authentication_vector = authentication_vector + "N";
        }

        if (c_none.isSelected()) {
            impact_confidentiality = impact_confidentiality + "N";
        } else if (c_partial.isSelected()) {
            impact_confidentiality = impact_confidentiality + "P";
        } else if (c_complete.isSelected()) {
            impact_confidentiality = impact_confidentiality + "C";
        }

        if (i_none.isSelected()) {
            impact_integrity = impact_integrity + "N";
        } else if (i_partial.isSelected()) {
            impact_integrity = impact_integrity + "P";
        } else if (i_complete.isSelected()) {
            impact_integrity = impact_integrity + "C";
        }

        if (a_none.isSelected()) {
            impact_availability = impact_availability + "N";
        } else if (a_partial.isSelected()) {
            impact_availability = impact_availability + "P";
        } else if (a_complete.isSelected()) {
            impact_availability = impact_availability + "C";
        }

        /*
         // Temporal scores
         String temporal_exploitability = "E" ;
         String temporal_remediation_level = "RL" ;
         String tmporal_report_confidence = "RC" ;
         */
        if (e_not_defined.isSelected()) {
            temporal_exploitability = temporal_exploitability + "ND";
        } else if (e_unproven.isSelected()) {
            temporal_exploitability = temporal_exploitability + "U";
        } else if (e_poc.isSelected()) {
            temporal_exploitability = temporal_exploitability + "POC";
        } else if (e_functional.isSelected()) {
            temporal_exploitability = temporal_exploitability + "F";
        } else if (e_high.isSelected()) {
            temporal_exploitability = temporal_exploitability + "H";
        }

        if (rl_not_defined.isSelected()) {
            temporal_remediation_level = temporal_remediation_level + "ND";
        } else if (rl_official.isSelected()) {
            temporal_remediation_level = temporal_remediation_level + "OF";
        } else if (rl_temporary.isSelected()) {
            temporal_remediation_level = temporal_remediation_level + "T";
        } else if (rl_workaround.isSelected()) {
            temporal_remediation_level = temporal_remediation_level + "W";
        } else if (rl_unavailable.isSelected()) {
            temporal_remediation_level = temporal_remediation_level + "U";
        }

        if (rc_not_defined.isSelected()) {
            tmporal_report_confidence = tmporal_report_confidence + "ND";
        } else if (rc_unconfirmed.isSelected()) {
            tmporal_report_confidence = tmporal_report_confidence + "UC";
        } else if (rc_uncorroborated.isSelected()) {
            tmporal_report_confidence = tmporal_report_confidence + "UR";
        } else if (rc_confirmed.isSelected()) {
            tmporal_report_confidence = tmporal_report_confidence + "C";
        }

        /*
        
         // Environmental scores
         String collatoral_damage_potential = "CDP" ;
         String target_distrobution = "TD" ;
         String confidentiality_requirement = "CR" ;
         String integrity_requirement = "IR" ;
         String availability_requirement = "AR" ;        
         */
        if (cdp_not_defined.isSelected()) {
            collatoral_damage_potential = collatoral_damage_potential + "ND";
        } else if (cdp_none.isSelected()) {
            collatoral_damage_potential = collatoral_damage_potential + "N";
        } else if (cdp_low.isSelected()) {
            collatoral_damage_potential = collatoral_damage_potential + "L";
        } else if (cdp_low_medium.isSelected()) {
            collatoral_damage_potential = collatoral_damage_potential + "LM";
        } else if (cdp_medium_high.isSelected()) {
            collatoral_damage_potential = collatoral_damage_potential + "MH";
        } else if (cdp_high.isSelected()) {
            collatoral_damage_potential = collatoral_damage_potential + "H";
        }

        if (target_dist_not_defined.isSelected()) {
            target_distrobution = target_distrobution + "ND";
        } else if (target_dist_none.isSelected()) {
            target_distrobution = target_distrobution + "N";
        } else if (target_dist_low.isSelected()) {
            target_distrobution = target_distrobution + "L";
        } else if (target_dist_medium.isSelected()) {
            target_distrobution = target_distrobution + "M";
        } else if (target_dist_high.isSelected()) {
            target_distrobution = target_distrobution + "H";
        }

        if (confidentiality_requirement_not_defined.isSelected()) {
            confidentiality_requirement = confidentiality_requirement + "ND";
        } else if (confidentiality_requirement_low.isSelected()) {
            confidentiality_requirement = confidentiality_requirement + "L";
        } else if (confidentiality_requirement_medium.isSelected()) {
            confidentiality_requirement = confidentiality_requirement + "M";
        } else if (confidentiality_requirement_high.isSelected()) {
            confidentiality_requirement = confidentiality_requirement + "H";
        }

        if (integrity_requirement_not_defined.isSelected()) {
            integrity_requirement = integrity_requirement + "ND";
        } else if (integrity_requirement_low.isSelected()) {
            integrity_requirement = integrity_requirement + "L";
        } else if (integrity_requirement_medium.isSelected()) {
            integrity_requirement = integrity_requirement + "M";
        } else if (integrity_requirement_high.isSelected()) {
            integrity_requirement = integrity_requirement + "H";
        }

        if (availability_requirement_not_defined.isSelected()) {
            availability_requirement = availability_requirement + "ND";
        } else if (availability_requirement_low.isSelected()) {
            availability_requirement = availability_requirement + "L";
        } else if (availability_requirement_medium.isSelected()) {
            availability_requirement = availability_requirement + "M";
        } else if (availability_requirement_high.isSelected()) {
            availability_requirement = availability_requirement + "H";
        }

        // create it
        String base_vector = access_vector + "/" + access_complexity_vector + "/" + authentication_vector + "/" + impact_confidentiality + "/" + impact_integrity + "/" + impact_availability;
        String temporal_vector = temporal_exploitability + "/" + temporal_remediation_level + "/" + tmporal_report_confidence;
        String environmental_vector = collatoral_damage_potential + "/" + target_distrobution + "/" + confidentiality_requirement + "/" + integrity_requirement + "/" + availability_requirement;
        //System.out.println("temporal_vector: " + temporal_vector);
        //System.out.println("environmental vector: " + environmental_vector);

        current_vec = "CVSS2#" + base_vector + "/" + temporal_vector + "/" + environmental_vector;

        try {

            CVSSVector vec = new CVSSVector(current_vec);
            String score = "" + vec.getRiskScore();
            // If we get here without exceptions then we have enough to construct a vector

            if (this.tmp_vuln.isIs_custom_risk() == true) {
                // currently it was a custom risk. Prompt user about replacing the scheme
                int answer = JOptionPane.showConfirmDialog(null, "Changing from 'custom risk' to CVSS vector, sure you want to use proper risk metrics?");
                if (answer == JOptionPane.OK_OPTION) {
                    // ok they want to do that!

                    // Update the tmp vuln
                    this.tmp_vuln.setIs_custom_risk(false);
                    // this.tmp_vuln.setCvss_vector_string(current_vec);
                }
            }
            this.tmp_vuln.setCvss_vector_string(current_vec);

            // Update the GUI
            CVSSVectorString.setText(this.tmp_vuln.getCvss_vector_string());
            RiskScore.setText("" + this.tmp_vuln.getRiskScore());
            // Unmap the action listeners
            this.RiskCategoryList.removeActionListener(RiskCategoryList.getActionListeners()[0]);
            RiskCategoryList.setSelectedItem(this.tmp_vuln.getRisk_category());
            // Setup the JList selection listeners
            RiskCategoryList.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    RiskCategoryListActionPerformed(evt);
                }
            });

        } catch (Exception ex) {
            // to get here the base vector is not cooked yet. You must have the complete base vector            
            return;
        }

    }
}
