/* 
 * Copyright 2015 cornerpirate.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cornerpirate.reportcompiler.GUI;

import com.cornerpirate.reportcompiler.Models.Reference;
import com.cornerpirate.reportcompiler.Models.Vulnerability;
import com.cornerpirate.reportcompiler.Utils.AffectedHostsTableModel;
import com.cornerpirate.reportcompiler.Utils.Helper;
import com.cornerpirate.reportcompiler.Utils.TreeUtils;
import com.cornerpirate.reportcompiler.Views.MergedTreeSelectionListener;
import com.cornerpirate.reportcompiler.Views.ToMergeTreeSelectionListener;
import com.cornerpirate.reportcompiler.Views.VulnerabilityViewTreeCellRenderer;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.ToolTipManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author cornerpirate
 */
public class MergeVulnerabilitiesWindow extends javax.swing.JFrame {

    JTree VulnTree;
    final Helper helper = new Helper();
    
    // Added to change from default Java logo.
    ImageIcon logo = new ImageIcon(getClass().getClassLoader().getResource("icon.png"));

    /**
     * Creates new form MergeVulnerabilitiesWindow
     */
    public MergeVulnerabilitiesWindow(JTree vt) {
        initComponents();
        this.VulnTree = vt;

        // set the icon 
        this.setIconImage(logo.getImage());        
        
        // Setup document listener
        setupDocumentListeners() ;
        

        // setup merge listeners
        HashMap gui = new HashMap();
        gui.put("title", MergeVulnTitleTextField);
        gui.put("cvss", MergeVulnCVSSVectorTextField);
        gui.put("score", MergeVulnScore);
        gui.put("category", MergeVulnRiskCategory);
        gui.put("description", MergeVulnDescriptionTextPane);
        gui.put("recommendation", MergeVulnRecommendationTextPane);
        gui.put("references", MergeVulnReferencesList);
        gui.put("affected", MergeVulnAffectedHostsTable);
        gui.put("editrisk", MergeEditRiskButton);
        ToMergeTreeSelectionListener toMergeListener = new ToMergeTreeSelectionListener(gui, this.ToMergeTree, this.MergedTree);
        ToMergeTree.addTreeSelectionListener(toMergeListener);
        MergedTreeSelectionListener mergedListener = new MergedTreeSelectionListener(gui, this.ToMergeTree, this.MergedTree);
        MergedTree.addTreeSelectionListener(mergedListener);
        // Setup Tool Tips for the trees
        ToolTipManager.sharedInstance().registerComponent(ToMergeTree);
        ToolTipManager.sharedInstance().registerComponent(MergedTree);
        // Setup the GUI
        setupGui();
        this.setLocationRelativeTo(null); // this centres the dialog on the screen

        // get users preferred font size if they have it. Sets to 12 if they dont.
        Font currentfont = this.MergeVulnTitleTextField.getFont();
        helper.setFontSize(currentfont, this.getRootPane());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        VulnerabilitiesToMergeContextMenu = new javax.swing.JPopupMenu();
        MergeCopyText = new javax.swing.JMenuItem();
        VulnReferencesContextMenu = new javax.swing.JPopupMenu();
        InsertReference = new javax.swing.JMenuItem();
        EditReferenceOption = new javax.swing.JMenuItem();
        LaunchInBrowser = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        DeleteReferenceOption = new javax.swing.JMenuItem();
        jSplitPane6 = new javax.swing.JSplitPane();
        jSplitPane8 = new javax.swing.JSplitPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        ToMergeTree = new javax.swing.JTree();
        jScrollPane10 = new javax.swing.JScrollPane();
        MergedTree = new javax.swing.JTree();
        RightPanel = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane14 = new javax.swing.JScrollPane();
        MergeVulnDescriptionTextPane = new javax.swing.JTextPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        MergeVulnRecommendationTextPane = new javax.swing.JTextPane();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        MergeVulnReferencesList = new javax.swing.JList();
        MergeVulnReferencesList.setModel(new DefaultListModel());
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        MergeVulnAffectedHostsScrollPane = new javax.swing.JScrollPane();
        MergeVulnAffectedHostsTable = new javax.swing.JTable();
        VulnerabilityTopPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        MergeVulnTitleTextField = new javax.swing.JTextField();
        MergeDoMergeButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        MergeVulnCVSSVectorTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        MergeVulnRiskCategory = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        MergeVulnScore = new javax.swing.JTextField();
        MergeEditRiskButton = new javax.swing.JButton();

        MergeCopyText.setText("Copy Text");
        MergeCopyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MergeCopyTextActionPerformed(evt);
            }
        });
        VulnerabilitiesToMergeContextMenu.add(MergeCopyText);

        InsertReference.setText("Insert Reference");
        InsertReference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertReferenceActionPerformed(evt);
            }
        });
        VulnReferencesContextMenu.add(InsertReference);

        EditReferenceOption.setText("Edit Reference");
        EditReferenceOption.setToolTipText("");
        EditReferenceOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditReferenceOptionActionPerformed(evt);
            }
        });
        VulnReferencesContextMenu.add(EditReferenceOption);

        LaunchInBrowser.setText("Launch in Browser");
        LaunchInBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaunchInBrowserActionPerformed(evt);
            }
        });
        VulnReferencesContextMenu.add(LaunchInBrowser);
        VulnReferencesContextMenu.add(jSeparator3);

        DeleteReferenceOption.setText("Delete Reference");
        DeleteReferenceOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteReferenceOptionActionPerformed(evt);
            }
        });
        VulnReferencesContextMenu.add(DeleteReferenceOption);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ReportCompiler Merge Screen");

        jSplitPane6.setDividerLocation(400);
        jSplitPane6.setDividerSize(20);
        jSplitPane6.setLastDividerLocation(400);
        jSplitPane6.setOneTouchExpandable(true);

        jSplitPane8.setDividerLocation(600);
        jSplitPane8.setDividerSize(20);
        jSplitPane8.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane8.setEnabled(false);
        jSplitPane8.setOneTouchExpandable(true);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("VulnerabilitiesToMerge");
        ToMergeTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        ToMergeTree.setToolTipText("Showing the list of vulnerabilities that you have chosen to merge.");
        ToMergeTree.setCellRenderer(new VulnerabilityViewTreeCellRenderer(false));
        ToMergeTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ToMergeTreeMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(ToMergeTree);

        jSplitPane8.setTopComponent(jScrollPane9);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("MergedVulnerability");
        MergedTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        MergedTree.setToolTipText("Showing the vulnerability you have constructed to replace those shown above.");
        MergedTree.setCellRenderer(new VulnerabilityViewTreeCellRenderer(false)
        );
        jScrollPane10.setViewportView(MergedTree);

        jSplitPane8.setBottomComponent(jScrollPane10);

        jSplitPane6.setLeftComponent(jSplitPane8);

        RightPanel.setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(20);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        jSplitPane2.setDividerLocation(120);
        jSplitPane2.setDividerSize(20);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setOneTouchExpandable(true);
        jSplitPane1.setBottomComponent(jSplitPane2);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Description");
        jPanel1.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane14.setViewportView(MergeVulnDescriptionTextPane);

        jPanel1.add(jScrollPane14, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(jPanel1);

        jSplitPane3.setDividerLocation(120);
        jSplitPane3.setDividerSize(20);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setOneTouchExpandable(true);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Recommendation");
        jPanel2.add(jLabel2, java.awt.BorderLayout.PAGE_START);

        jScrollPane12.setViewportView(MergeVulnRecommendationTextPane);

        jPanel2.add(jScrollPane12, java.awt.BorderLayout.CENTER);

        jSplitPane3.setLeftComponent(jPanel2);

        jSplitPane4.setDividerLocation(250);
        jSplitPane4.setDividerSize(20);
        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane4.setOneTouchExpandable(true);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("References");
        jPanel3.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        MergeVulnReferencesList.setToolTipText("Right click on this area to see options for references.");
        MergeVulnReferencesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MergeVulnReferencesListMouseClicked(evt);
            }
        });
        MergeVulnReferencesList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MergeVulnReferencesListKeyPressed(evt);
            }
        });
        jScrollPane11.setViewportView(MergeVulnReferencesList);

        jPanel3.add(jScrollPane11, java.awt.BorderLayout.CENTER);

        jSplitPane4.setTopComponent(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Affected Hosts");
        jPanel4.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        MergeVulnAffectedHostsScrollPane.setToolTipText("Right click on this area to insert new affected hosts. Select one or more and press 'del' to delete or use the right click 'delete' option.");

        MergeVulnAffectedHostsTable.setAutoCreateRowSorter(true);
        MergeVulnAffectedHostsTable.setModel(new AffectedHostsTableModel());
        MergeVulnAffectedHostsTable.setCellSelectionEnabled(true);
        MergeVulnAffectedHostsScrollPane.setViewportView(MergeVulnAffectedHostsTable);

        jPanel4.add(MergeVulnAffectedHostsScrollPane, java.awt.BorderLayout.CENTER);

        jSplitPane4.setRightComponent(jPanel4);

        jSplitPane3.setRightComponent(jSplitPane4);

        jSplitPane1.setRightComponent(jSplitPane3);

        RightPanel.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        VulnerabilityTopPanel.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.LINE_AXIS));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Title: ");
        jPanel8.add(jLabel9);

        MergeVulnTitleTextField.setColumns(80);
        jPanel8.add(MergeVulnTitleTextField);

        MergeDoMergeButton.setText("Merge");
        MergeDoMergeButton.setToolTipText("Click here to replace the 'VulnerabilitiesToMerge' in your current test with the 'MergedVulnerability'");
        MergeDoMergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MergeDoMergeButtonActionPerformed(evt);
            }
        });
        jPanel8.add(MergeDoMergeButton);

        VulnerabilityTopPanel.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.LINE_AXIS));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("CVSS:");
        jPanel9.add(jLabel10);

        MergeVulnCVSSVectorTextField.setEditable(false);
        MergeVulnCVSSVectorTextField.setColumns(81);
        jPanel9.add(MergeVulnCVSSVectorTextField);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Category:");
        jPanel9.add(jLabel11);

        MergeVulnRiskCategory.setEditable(false);
        MergeVulnRiskCategory.setColumns(8);
        jPanel9.add(MergeVulnRiskCategory);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Score:");
        jPanel9.add(jLabel12);

        MergeVulnScore.setEditable(false);
        MergeVulnScore.setColumns(4);
        jPanel9.add(MergeVulnScore);

        MergeEditRiskButton.setText("Edit Risk");
        MergeEditRiskButton.setToolTipText("Click here to see the Risk Calculator where scores can be modified");
        MergeEditRiskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MergeEditRiskButtonActionPerformed(evt);
            }
        });
        jPanel9.add(MergeEditRiskButton);

        VulnerabilityTopPanel.add(jPanel9, java.awt.BorderLayout.CENTER);

        RightPanel.add(VulnerabilityTopPanel, java.awt.BorderLayout.NORTH);

        jSplitPane6.setRightComponent(RightPanel);

        getContentPane().add(jSplitPane6, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ToMergeTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ToMergeTreeMouseClicked
        // Do nothing
        Object obj = this.ToMergeTree.getLastSelectedPathComponent();

        if (obj == null) // No vulns selected so no interaction required
        {
            return;
        }

        if (evt.getButton() == MouseEvent.BUTTON3) {

            // At least one vuln was selected so we need to see how many and modify the context menu
            if (this.ToMergeTree.getSelectionCount() == 1) { // User cannot merge because they don't have two selected
                this.MergeCopyText.setEnabled(true);
            } else {
                this.MergeCopyText.setEnabled(false);
            }
            VulnerabilitiesToMergeContextMenu.show(this.ToMergeTree, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_ToMergeTreeMouseClicked

    private void MergeVulnReferencesListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MergeVulnReferencesListKeyPressed

        int pressed = evt.getKeyCode();
        if (pressed == KeyEvent.VK_DELETE) {

            deleteReferences(MergedTree, MergeVulnReferencesList);

        } else if (pressed == KeyEvent.VK_INSERT) {
            addReference(MergedTree, MergeVulnReferencesList, null);
        }
    }//GEN-LAST:event_MergeVulnReferencesListKeyPressed

    public void addReference(JTree tree, JList list, Reference current) {
        DefaultMutableTreeNode node = ((DefaultMutableTreeNode) tree.getLastSelectedPathComponent());
        if (node == null) {
            return;
        }

        Object obj = node.getUserObject();
        if (!(obj instanceof Vulnerability)) {
            return; // here be monsters, most likely in the merge tree
        }
        Vulnerability vuln = (Vulnerability) obj;
        DefaultListModel dlm = (DefaultListModel) list.getModel();
        // Build Input Field and display it
        JTextField description = new JTextField();
        JTextField url = new JTextField();

        // If current is not null then pre-set the description and risk
        if (current != null) {
            description.setText(current.getDescription());
            url.setText(current.getUrl());
        }

        JLabel error = new JLabel("A valid URL needs to be supplied including the protocol i.e. http://www.github.com");
        error.setForeground(Color.red);
        Object[] message = {
            "Description:", description,
            "URL:", url
        };

        String url_string = null;
        Reference newref = null;
        while (url_string == null) {
            int option = JOptionPane.showConfirmDialog(null, message, "Add Reference", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                System.out.println("User clicked ok, validating data");
                String ref_desc = description.getText();
                String ref_url = url.getText();
                if (!ref_desc.equals("") || !ref_url.equals("")) {
                    // Both have values
                    // Try to validate URL
                    try {

                        URL u = new URL(url.getText());
                        u.toURI();
                        url_string = url.getText(); // Causes loop to end with a valid url

                    } catch (MalformedURLException ex) {
                        url_string = null;
                        //ex.printStackTrace();
                    } catch (URISyntaxException ex) {
                        url_string = null;
                        //ex.printStackTrace();
                    }

                }

            } else if (option == JOptionPane.CANCEL_OPTION || option == JOptionPane.CLOSED_OPTION) {
                System.out.println("User clicked cancel/close");
                return; // ends the loop without making any chages
            }

            if (url_string == null) {
                // We need to show an error saying that the url failed to parse
                Object[] message2 = {
                    error, "Description:", description, "URL:", url
                };
                message = message2;

            }
        }

        // If you get here there is a valid reference URL and description
        Reference ref = new Reference(description.getText(), url.getText());

        if (current == null) {
            // Add it to the vuln
            vuln.addReference(ref);
            // Add it to the GUI 
            dlm.addElement(ref);
            System.out.println("Valid reference added: " + ref);
        } else {
            // Modify it in the vuln
            vuln.modifyReference(current, ref);
            // Update the GUI
            dlm.removeElement(current);
            dlm.addElement(ref);
            System.out.println("Valid reference modified: " + ref);
        }

    }

    public void deleteReferences(JTree tree, JList list) {

        DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }

        Object obj = node.getUserObject();
        if (!(obj instanceof Vulnerability)) {
            return;
        }

        // Get currently selected vulnerability
        Vulnerability vuln = (Vulnerability) obj;
        DefaultListModel dlm = (DefaultListModel) list.getModel();
        List selected = list.getSelectedValuesList();
        for (Object ref_obj : selected) {
            if (ref_obj instanceof Reference) {
                Reference ref = (Reference) ref_obj;
                vuln.deleteReference(ref);
                dlm.removeElement(ref_obj);
                System.out.println("Deleted Reference: " + ref);
            } else {
                System.out.println("Somehow the references list contained a non-Regerence object");
            }
        }
    }

    private void MergeDoMergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MergeDoMergeButtonActionPerformed

        DefaultTreeModel dtm = (DefaultTreeModel) VulnTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();

        // Remove the existing nodes
        TreePath[] paths = VulnTree.getSelectionPaths();
        if (paths == null) {
            return;
        }

        // User wants to merge, so delete the old vulns
        for (int i = 0; i < paths.length; i++) {
            TreePath path = paths[i];
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            node.removeFromParent(); // Delete vuln
        }

        // Insert the merged version.
        DefaultTreeModel dtm_merged = (DefaultTreeModel) MergedTree.getModel();
        DefaultMutableTreeNode merged = ((DefaultMutableTreeNode) dtm_merged.getRoot()).getFirstLeaf();
        Vulnerability vuln = (Vulnerability) merged.getUserObject();
        DefaultMutableTreeNode answer = new DefaultMutableTreeNode(vuln);
        root.add(answer);

        // Sort the answer
        root = new TreeUtils().sortVulns(root);
        // Update the view
        dtm.setRoot(root);

        // Select the newly added node
        TreePath p = new TreePath(answer.getPath());
        VulnTree.setSelectionPath(p);

        // Close the window
        this.setVisible(false);
    }//GEN-LAST:event_MergeDoMergeButtonActionPerformed

    private void MergeCopyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MergeCopyTextActionPerformed

        System.out.println("Merge Vuln Copy Text Selected");
        // Get the selected vuln
        Object obj = this.ToMergeTree.getLastSelectedPathComponent();

        if (obj == null) // No vulns selected so no interaction required
        {
            return;
        }
        DefaultMutableTreeNode copyNode = (DefaultMutableTreeNode) obj;
        Object userobj = copyNode.getUserObject();

        if (userobj instanceof Vulnerability) {
            Vulnerability copyfrom = (Vulnerability) userobj;
            // Now get the merged vuln
            DefaultTreeModel dtm = (DefaultTreeModel) MergedTree.getModel();
            DefaultMutableTreeNode root = (DefaultMutableTreeNode) dtm.getRoot();
            DefaultMutableTreeNode mergedNode = (DefaultMutableTreeNode) root.getFirstLeaf();
            root.removeAllChildren();
            Vulnerability mergedVuln = (Vulnerability) mergedNode.getUserObject();
            // Copy all the relevant bits
            mergedVuln.setTitle(copyfrom.getTitle());
            mergedVuln.setDescription(copyfrom.getDescription());
            mergedVuln.setRecommendation(copyfrom.getRecommendation());
            mergedVuln.cloneReferences(copyfrom);
            mergedVuln.cloneRisk(copyfrom);
            DefaultMutableTreeNode newnode = new DefaultMutableTreeNode(mergedVuln);
            root.add(newnode);
            // Select the merged vuln in the GUI to show good feedback
            TreePath p = new TreePath(newnode.getPath());
            MergedTree.setSelectionPath(p);
            dtm.reload();
            System.out.println("Merge Tree Should be empty now");

        }
    }//GEN-LAST:event_MergeCopyTextActionPerformed

    private void MergeEditRiskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MergeEditRiskButtonActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) MergedTree.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        Object obj = node.getUserObject();
        if (obj instanceof Vulnerability) {
            // Show Edit Risk Window
            CVSSv2Calculator riskWindow = new CVSSv2Calculator(this, true, this.MergedTree, node);
            riskWindow.setVisible(true);
        }
    }//GEN-LAST:event_MergeEditRiskButtonActionPerformed

    private void InsertReferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertReferenceActionPerformed

        addReference(VulnTree, MergeVulnReferencesList, null);
    }//GEN-LAST:event_InsertReferenceActionPerformed

    private void EditReferenceOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditReferenceOptionActionPerformed

        Object obj = MergeVulnReferencesList.getSelectedValue();
        if (obj == null) {
            // We should simply show the 'add reference' prompy
        } else if (obj instanceof Reference) {
            // User probably wants to edit the existing reference
            Reference ref = (Reference) obj;
            addReference(VulnTree, MergeVulnReferencesList, ref);
        }
    }//GEN-LAST:event_EditReferenceOptionActionPerformed

    private void LaunchInBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaunchInBrowserActionPerformed
        System.out.println("Launch References in Browser Selected");
        launchSelectedReferences(MergeVulnReferencesList);
    }//GEN-LAST:event_LaunchInBrowserActionPerformed

    private void DeleteReferenceOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteReferenceOptionActionPerformed
        deleteReferences(this.VulnTree, this.MergeVulnReferencesList);
    }//GEN-LAST:event_DeleteReferenceOptionActionPerformed

    private void MergeVulnReferencesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MergeVulnReferencesListMouseClicked

        if (MergeVulnReferencesList.isEnabled() == false) {
            return;
        }

        int clicked = evt.getButton();
        if (clicked == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
            // A double click. Lets see if there is already a link or if we are creating a new one
            Object obj = MergeVulnReferencesList.getSelectedValue();
            if (obj == null) {
                // We should simply show the 'add reference' prompy
            } else if (obj instanceof Reference) {
                // User probably wants to edit the existing reference
                Reference ref = (Reference) obj;
                addReference(VulnTree, MergeVulnReferencesList, ref);
            }
        } else if (clicked == MouseEvent.BUTTON3) {
            // A right click. Show the context menu
            //int selected = VulnReferencesList.getSelectedIndex();
            List l = MergeVulnReferencesList.getSelectedValuesList();
            int selected = l.size();

            System.out.println("selected: " + selected);
            // None are selected enable insert and disable all the rest
            InsertReference.setEnabled(true);
            EditReferenceOption.setEnabled(false);
            LaunchInBrowser.setEnabled(false);
            DeleteReferenceOption.setEnabled(false);

            if (selected == 1) {
                // One was selected to enable the right options
                InsertReference.setEnabled(true);
                EditReferenceOption.setEnabled(true);
                LaunchInBrowser.setEnabled(true);
                DeleteReferenceOption.setEnabled(true);
            } else if (selected >= 2) {
                // One was selected to enable the right options
                InsertReference.setEnabled(true);
                EditReferenceOption.setEnabled(false);
                LaunchInBrowser.setEnabled(true);
                DeleteReferenceOption.setEnabled(true);
            }

            VulnReferencesContextMenu.show((Component) evt.getSource(), evt.getX(), evt.getY());
        }

    }//GEN-LAST:event_MergeVulnReferencesListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MergeVulnerabilitiesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MergeVulnerabilitiesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MergeVulnerabilitiesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MergeVulnerabilitiesWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*
         java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
         new MergeVulnerabilitiesWindow().setVisible(true);
         }
         });
         */
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DeleteReferenceOption;
    private javax.swing.JMenuItem EditReferenceOption;
    private javax.swing.JMenuItem InsertReference;
    private javax.swing.JMenuItem LaunchInBrowser;
    private javax.swing.JMenuItem MergeCopyText;
    private javax.swing.JButton MergeDoMergeButton;
    private javax.swing.JButton MergeEditRiskButton;
    private javax.swing.JScrollPane MergeVulnAffectedHostsScrollPane;
    private javax.swing.JTable MergeVulnAffectedHostsTable;
    private javax.swing.JTextField MergeVulnCVSSVectorTextField;
    private javax.swing.JTextPane MergeVulnDescriptionTextPane;
    private javax.swing.JTextPane MergeVulnRecommendationTextPane;
    private javax.swing.JList MergeVulnReferencesList;
    private javax.swing.JTextField MergeVulnRiskCategory;
    private javax.swing.JTextField MergeVulnScore;
    private javax.swing.JTextField MergeVulnTitleTextField;
    private javax.swing.JTree MergedTree;
    private javax.swing.JPanel RightPanel;
    private javax.swing.JTree ToMergeTree;
    private javax.swing.JPopupMenu VulnReferencesContextMenu;
    private javax.swing.JPopupMenu VulnerabilitiesToMergeContextMenu;
    private javax.swing.JPanel VulnerabilityTopPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JSplitPane jSplitPane8;
    // End of variables declaration//GEN-END:variables

    private void setupGui() {

        DefaultMutableTreeNode vulnTreeRoot = (DefaultMutableTreeNode) this.VulnTree.getModel().getRoot();
        // Setup the to Merge Tree with the selected nodes
        DefaultTreeModel toMergeModel = (DefaultTreeModel) this.ToMergeTree.getModel();
        DefaultMutableTreeNode toMergeRoot = new DefaultMutableTreeNode("VulnerabilitiesToMerge");
        Vector vulns = new Vector();
        TreePath[] paths = VulnTree.getSelectionPaths();
        for (int i = 0; i < paths.length; i++) {
            TreePath path = paths[i];
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
            // Add it to the toMerge Tree
            toMergeRoot.add(new DefaultMutableTreeNode(node.getUserObject()));
            vulns.add((Vulnerability) node.getUserObject());
        }
        toMergeModel.setRoot(toMergeRoot);

        // Get a merged vulnerability
        Vulnerability merged = new Vulnerability().mergeVulnerabilities(vulns);
        // Add it to the tee
        DefaultMutableTreeNode mergedRoot = new DefaultMutableTreeNode("MergedVulnerability");
        DefaultMutableTreeNode mergedNode = new DefaultMutableTreeNode(merged);
        mergedRoot.add(mergedNode);

        DefaultTreeModel mergedModel = (DefaultTreeModel) MergedTree.getModel();
        mergedModel.setRoot(mergedRoot);

        // Select the merged vuln
        TreePath p = new TreePath(mergedNode.getPath());
        MergedTree.setSelectionPath(p);
    }

    private void launchSelectedReferences(JList MergeVulnReferencesList) {
        System.out.println("Launch References in Browser Selected");
        launchSelectedReferences(MergeVulnReferencesList);
    }

    private void setupDocumentListeners() {
        DocumentListener titleListener = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            public void insertUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            public void removeUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            private void printIt(DocumentEvent documentEvent) {
                // Check to see if the merged node is selected and if not return
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) MergedTree.getLastSelectedPathComponent();
                if (node == null) {
                    return;
                }
                // Ok so the merged node is selected and the text has changed.
                Object obj = node.getUserObject();
                if (obj instanceof Vulnerability) {
                    Vulnerability vuln = (Vulnerability) obj;
                    String new_title = MergeVulnTitleTextField.getText();
                    System.out.println(new_title);
                    // Update the title of the vuln
                    vuln.setTitle(new_title);
                    // Refresh the title in the tree
                    ((DefaultTreeModel) MergedTree.getModel()).nodeChanged(node);
                }

            }
        };

        MergeVulnTitleTextField.getDocument().addDocumentListener(titleListener);
        
        DocumentListener descriptionListener = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            public void insertUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            public void removeUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            private void printIt(DocumentEvent documentEvent) {
                // Check to see if the merged node is selected and if not return
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) MergedTree.getLastSelectedPathComponent();
                if (node == null) {
                    return;
                }
                // Ok so the merged node is selected and the text has changed.
                Object obj = node.getUserObject();
                if (obj instanceof Vulnerability) {
                    Vulnerability vuln = (Vulnerability) obj;
                    String new_description = MergeVulnDescriptionTextPane.getText();
                    // Update the description of the vuln
                    vuln.setDescription(new_description);
                }

            }
        };

        MergeVulnDescriptionTextPane.getDocument().addDocumentListener(descriptionListener);
        
                DocumentListener recommendationListener = new DocumentListener() {
            public void changedUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            public void insertUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            public void removeUpdate(DocumentEvent documentEvent) {
                printIt(documentEvent);
            }

            private void printIt(DocumentEvent documentEvent) {
                // Check to see if the merged node is selected and if not return
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) MergedTree.getLastSelectedPathComponent();
                if (node == null) {
                    return;
                }
                // Ok so the merged node is selected and the text has changed.
                Object obj = node.getUserObject();
                if (obj instanceof Vulnerability) {
                    Vulnerability vuln = (Vulnerability) obj;
                    String new_recommendation = MergeVulnRecommendationTextPane.getText();
                    // Update the description of the vuln
                    vuln.setRecommendation(new_recommendation);
                }

            }
        };

        MergeVulnRecommendationTextPane.getDocument().addDocumentListener(recommendationListener);
    }
}
